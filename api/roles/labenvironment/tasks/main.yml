---
# tasks file for LabEnvironment
- name: Manage Namespace
  kubernetes.core.k8s:
    # state: "{{ state }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ ansible_operator_meta.name }}"

- name: Manage RoleBinding for user
  kubernetes.core.k8s:
    # state: "{{ state }}"
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.name }}"
      subjects:
        - kind: User
          apiGroup: rbac.authorization.k8s.io
          name: "{{ ansible_operator_meta.name }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin # for example

- name: Manage ResourceQuota
  kubernetes.core.k8s:
    # state: "{{ state }}"
    definition:
      kind: ResourceQuota
      apiVersion: v1
      metadata:
        name: compute-resources
        namespace: "{{ ansible_operator_meta.name }}"
      spec:
        hard:
          limits.cpu: "{{ size_cpu | string }}"
          limits.memory: "{{ size_mem | string }}Gi"
          # requests.storage: "{{ size_storage | string }}Gi"
        scopes:
          - NotTerminating

# - name: Create LimitRange
#   kubernetes.core.k8s:
#     state: "{{ state }}"
#     definition:
#       kind: LimitRange
#       apiVersion: v1
#       metadata:
#         name: core-resource-limits
#         namespace: "{{ ansible_operator_meta.name }}"
#       spec:
#         limits:
#           - type: Container
#             default:
#               cpu: 500m
#               memory: "1.5Gi"
#             defaultRequest:
#               cpu: 250m
#               memory: 500Mi

- name: Manage StatefulSet
  kubernetes.core.k8s:
    # state: "{{ state }}"
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: lab
        namespace: "{{ ansible_operator_meta.name }}"
      spec:
        selector:
          matchLabels:
            app: lab # has to match .spec.template.metadata.labels
        replicas: "{{ replicas }}"
        # minReadySeconds: 10 # by default is 0
        template:
          metadata:
            labels:
              app: lab
          spec:
            #terminationGracePeriodSeconds: 10
            containers:
            - name: lab
              image: "ubuntu:22.04"
              command: [ "/bin/bash", "-c", "--" ]
              args: [ "while true; do sleep 30; done;" ]
              resources:
                limits:
                  memory: 512Mi
                  cpu: 500m
                requests:
                  memory: 256Mi
                  cpu: 250m
